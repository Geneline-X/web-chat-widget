{"version":3,"file":"index.cdn.js","sources":["../src/core/api-client.js","../src/utils/markdown.js","../src/utils/ui-helpers.js","../src/components/message-bubbles.js","../src/components/chat-container.js","../src/core/webchat.js","../src/utils/style-injector.js","../src/index.js"],"sourcesContent":["/**\n * HTTP API Client for direct communication with GeniStudio chatbot API\n * Based on https://genistudio-docs.vercel.app/api/messages/\n */\n\n/**\n * Send a message to the GeniStudio API endpoint with streaming support\n * @param {string} apiUrl - API URL\n * @param {string} chatbotId - Chatbot ID\n * @param {string} email - User email\n * @param {string} message - Message to send\n * @param {Function} onChunk - Callback for receiving streaming chunks\n * @param {Function} onComplete - Callback when streaming is complete\n * @param {Function} onError - Callback for errors\n * @param {Function} onTyping - Callback for typing indicators\n * @returns {Promise} - Promise that resolves when request is complete\n */\nexport async function sendMessageToAPI(\n  apiUrl,\n  chatbotId,\n  email,\n  message,\n  onChunk,\n  onComplete,\n  onError,\n  onTyping\n) {\n  try {\n    // Start typing indicator\n    if (onTyping) onTyping(true);\n\n    const requestBody = {\n      chatbotId: chatbotId,\n      email: email,\n      message: message\n    };\n\n    console.log(\"Sending message to GeniStudio API:\", apiUrl, requestBody);\n\n    const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(requestBody)\n    });\n\n    console.log(\"API Response status:\", response.status, response.statusText);\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error(\"API response error:\", response.status, errorText);\n      let errorMessage;\n      \n      try {\n        const errorData = JSON.parse(errorText);\n        errorMessage = errorData.message || `HTTP ${response.status}: ${response.statusText}`;\n      } catch (e) {\n        errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n      }\n      \n      throw new Error(errorMessage);\n    }\n\n    // Handle streamed response\n    const reader = response.body?.getReader();\n    if (!reader) {\n      // If no streaming support, read the whole response\n      const responseText = await response.text();\n      console.log(\"Non-streaming response received:\", responseText);\n      \n      // Stop typing indicator\n      if (onTyping) onTyping(false);\n      \n      // Try to parse as JSON\n      let messageContent = responseText;\n      try {\n        const jsonResponse = JSON.parse(responseText);\n        if (jsonResponse.message) {\n          messageContent = jsonResponse.message;\n        }\n      } catch (e) {\n        console.warn(\"Failed to parse JSON response, using raw text:\", e);\n      }\n      \n      // Call completion callback\n      if (onComplete) {\n        onComplete({\n          text: messageContent,\n          timestamp: new Date().toISOString()\n        });\n      }\n      \n      return { text: messageContent };\n    }\n\n    let accumulatedText = '';\n    \n    while (true) {\n      const { done, value } = await reader.read();\n      \n      if (done) break;\n      \n      const chunk = new TextDecoder().decode(value);\n      accumulatedText += chunk;\n      \n      // Try to extract message from chunk if it's JSON\n      let chunkContent = chunk;\n      try {\n        const jsonChunk = JSON.parse(chunk);\n        if (jsonChunk.message) {\n          chunkContent = jsonChunk.message;\n        }\n      } catch (e) {\n        // If parsing fails, use the raw chunk\n      }\n      \n      // Send processed chunk to callback\n      if (onChunk) {\n        console.log(\"Sending chunk to callback:\", chunkContent);\n        onChunk(chunkContent);\n      }\n    }\n\n    console.log(\"Complete response received:\", accumulatedText);\n\n    // Parse JSON response and extract message content\n    let messageContent = accumulatedText;\n    try {\n      const jsonResponse = JSON.parse(accumulatedText);\n      if (jsonResponse.message) {\n        messageContent = jsonResponse.message;\n      }\n    } catch (e) {\n      // If parsing fails, use the raw response\n      console.warn(\"Failed to parse JSON response, using raw text:\", e);\n    }\n\n    // Stop typing indicator\n    if (onTyping) onTyping(false);\n\n    // Call completion callback with extracted message\n    if (onComplete) {\n      onComplete({\n        text: messageContent,\n        timestamp: new Date().toISOString()\n      });\n    }\n\n    return { text: messageContent };\n\n  } catch (error) {\n    console.error(\"GeniStudio API request failed:\", error);\n    \n    // Stop typing indicator\n    if (onTyping) onTyping(false);\n    \n    // Handle error with user-friendly messages\n    if (onError) {\n      let errorMessage;\n      if (error.message.includes('Failed to fetch')) {\n        errorMessage = \"Unable to connect to chat service. Please check your internet connection and try again.\";\n      } else if (error.message.includes('CORS')) {\n        errorMessage = \"Unable to connect to chat service due to security restrictions.\";\n      } else {\n        errorMessage = `Failed to communicate with chat service: ${error.message}`;\n      }\n      \n      onError(errorMessage);\n    }\n    \n    throw error;\n  }\n}\n","/**\n * Utility for parsing markdown to HTML\n */\n\n/**\n * Simple markdown parser for vanilla JS\n * @param {string} text - Markdown text to parse\n * @returns {string} HTML string\n */\nexport function parseMarkdown(text) {\n  if (!text) return \"\";\n\n  return (\n    text\n      // Bold text\n      .replace(/\\*\\*(.*?)\\*\\*/g, \"<strong>$1</strong>\")\n      // Italic text\n      .replace(/\\*((?!\\*)(.*?))\\*/g, \"<em>$1</em>\")\n      // Links\n      .replace(\n        /\\[([^\\]]+)\\]\\(([^)]+)\\)/g,\n        '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>'\n      )\n      // Inline code\n      .replace(/`([^`]+)`/g, \"<code>$1</code>\")\n      // Convert bullet lists\n      .replace(/^\\*\\s+(.+)$/gm, \"<li>$1</li>\")\n      // Convert numbered lists\n      .replace(/^\\d+\\.\\s+(.+)$/gm, \"<li>$1</li>\")\n      // Wrap consecutive list items in ul tags\n      .replace(/(<li>.*<\\/li>)/gs, function (match) {\n        return \"<ul>\" + match + \"</ul>\";\n      })\n      // Fix nested ul tags\n      .replace(/<\\/ul>\\s*<ul>/g, \"\")\n      // Convert line breaks to paragraphs\n      .replace(/\\n\\n/g, \"</p><p>\")\n      // Convert single line breaks to br\n      .replace(/\\n/g, \"<br>\")\n      // Wrap in paragraph tags if not already wrapped\n      .replace(/^(?!<[uo]l>|<li>)(.+)$/gm, function (match) {\n        if (match.startsWith(\"<\") || match.trim() === \"\") return match;\n        return \"<p>\" + match + \"</p>\";\n      })\n      // Clean up empty paragraphs\n      .replace(/<p><\\/p>/g, \"\")\n      // Fix paragraph tags around lists\n      .replace(/<p>(<[uo]l>.*<\\/[uo]l>)<\\/p>/gs, \"$1\")\n  );\n}\n","/**\n * Chat UI component utilities\n */\n\n/**\n * Get an abbreviation for a name (for avatar)\n * @param {string} name - Name to abbreviate\n * @returns {string} - Two letter abbreviation\n */\nexport function getAbbreviation(name) {\n  if (!name) return \"\";\n  const words = name.trim().split(/\\s+/);\n  if (words.length === 1) {\n    return words[0].substring(0, 2).toUpperCase();\n  }\n  return (words[0][0] + words[words.length - 1][0]).toUpperCase();\n}\n\n/**\n * Format a timestamp to a readable time\n * @param {Date} timestamp - Timestamp to format\n * @returns {string} - Formatted time string\n */\nexport function formatTime(timestamp) {\n  return new Date(timestamp).toLocaleTimeString(\"en-US\", {\n    hour: \"2-digit\",\n    minute: \"2-digit\",\n  });\n}\n\n/**\n * Generate a unique user ID\n * @returns {string} - Random ID with web_ prefix\n */\nexport function generateUserId() {\n  return \"web_\" + Math.random().toString(36).substring(2, 15);\n}\n\n/**\n * Convert HTTP(S) URL to WebSocket URL if needed\n * @param {string} baseUrl - API URL\n * @returns {string} - WebSocket URL\n */\nexport function getWebSocketUrl(baseUrl) {\n  const wsUrl = baseUrl.replace(/^http/, \"ws\");\n  return `${wsUrl}/webchat/ws`;\n}\n\n/**\n * Check if two dates are on the same day\n * @param {Date} date1 - First date to compare\n * @param {Date} date2 - Second date to compare\n * @returns {boolean} - True if same day, false otherwise\n */\nexport function isSameDay(date1, date2) {\n  if (!date1 || !date2) return false;\n\n  date1 = new Date(date1);\n  date2 = new Date(date2);\n\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n}\n\n/**\n * Check if a message needs a date separator above it\n * @param {Object} message - Current message\n * @param {Object} prevMessage - Previous message\n * @returns {boolean} - True if date separator needed\n */\nexport function needsDateSeparator(message, prevMessage) {\n  if (!prevMessage) return true;\n\n  const messageDate = new Date(message.timestamp);\n  const prevMessageDate = new Date(prevMessage.timestamp);\n\n  return !isSameDay(messageDate, prevMessageDate);\n}\n\n/**\n * Group messages by sender for consecutive messages from the same sender\n * @param {Array} messages - Array of message objects\n * @returns {Array} - Grouped message objects with additional properties\n */\nexport function groupMessagesBySender(messages) {\n  if (!messages || !messages.length) return [];\n\n  return messages.map((message, index) => {\n    const prevMessage = index > 0 ? messages[index - 1] : null;\n\n    // Add grouping information\n    const isFirstInGroup =\n      !prevMessage ||\n      prevMessage.sender !== message.sender ||\n      needsDateSeparator(message, prevMessage);\n\n    const isLastInGroup =\n      index === messages.length - 1 ||\n      messages[index + 1].sender !== message.sender ||\n      needsDateSeparator(messages[index + 1], message);\n\n    // Add date separator flag\n    const needsSeparator = needsDateSeparator(message, prevMessage);\n\n    return {\n      ...message,\n      isFirstInGroup,\n      isLastInGroup,\n      needsDateSeparator: needsSeparator,\n    };\n  });\n}\n","/**\n * Message bubble component\n */\nimport { parseMarkdown } from \"../utils/markdown\";\nimport { formatTime } from \"../utils/ui-helpers\";\n\n/**\n * Render a message bubble for the chat\n * @param {Object} message - Message object\n * @param {boolean} [isNewMessage=true] - Whether this is a new message being added\n * @returns {HTMLElement} - Message bubble DOM element\n */\nexport function renderMessageBubble(message, isNewMessage = true) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.className = `message ${message.sender === 'bot' ? 'bot-message' : 'user-message'}`;\n  \n  // Add animation class for new messages\n  if (isNewMessage) {\n    wrapper.classList.add('message-entering');\n    \n    // Remove the animation class after animation completes\n    setTimeout(() => {\n      wrapper.classList.remove('message-entering');\n    }, 500);\n  }\n\n  if (message.sender === \"bot\") {\n    // Bot message with avatar and bubble\n    wrapper.innerHTML = `\n      <svg class=\"bot-avatar\" xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 1024 1024\">\n        <path d=\"M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z\"/>\n      </svg>\n      <div class=\"message-text\">${parseMarkdown(message.text || \"\")}</div>\n    `;\n  } else {\n    // User message (no avatar needed)\n    wrapper.innerHTML = `\n      <div class=\"message-text\">${parseMarkdown(message.text || \"\")}</div>\n    `;\n  }\n\n  // Add streaming cursor for bot messages\n  if (message.isStreaming && message.sender === \"bot\") {\n    const textContent = wrapper.querySelector('.message-text');\n    if (textContent) {\n      textContent.innerHTML += '<span class=\"cursor\">|</span>';\n    }\n  }\n\n  return wrapper;\n}\n\n/**\n * Render typing indicator\n * @param {string} [stage='typing'] - The processing stage ('processing', 'typing', 'thinking')\n * @param {boolean} [isNewMessage=true] - Whether this is a new typing indicator\n * @returns {HTMLElement} - Typing indicator DOM element\n */\nexport function renderTypingIndicator(stage = \"typing\", isNewMessage = true) {\n  const wrapper = document.createElement(\"div\");\n  wrapper.className = \"message bot-message thinking typing-wrapper\";\n  \n  // Add animation class for new indicators\n  if (isNewMessage) {\n    wrapper.classList.add('message-entering');\n    \n    // Remove the animation class after animation completes\n    setTimeout(() => {\n      wrapper.classList.remove('message-entering');\n    }, 500);\n  }\n\n  wrapper.innerHTML = `\n    <svg class=\"bot-avatar\" xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 1024 1024\">\n      <path d=\"M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z\"/>\n    </svg>\n    <div class=\"message-text\">\n      <div class=\"thinking-indicator\">\n        <div class=\"dot\"></div>\n        <div class=\"dot\"></div>\n        <div class=\"dot\"></div>\n      </div>\n    </div>\n  `;\n\n  return wrapper;\n}\n\n/**\n * Render empty state when no messages are present\n * @returns {HTMLElement} - Empty state DOM element\n */\n/**\n * Render empty state with welcome message\n * @returns {HTMLElement} - Empty state DOM element\n */\nexport function renderEmptyState() {\n  const emptyState = document.createElement(\"div\");\n  emptyState.className = \"webchat-empty-state\";\n  \n  // Create a welcome message\n  const welcomeMessage = {\n    id: 'welcome',\n    text: 'Hey there 👋\\nHow can I help you today?',\n    sender: 'bot',\n    timestamp: new Date(),\n    isStreaming: false\n  };\n  \n  return renderMessageBubble(welcomeMessage, false);\n}\n\n/**\n * Render a date separator\n * @param {Date} date - The date to display\n * @returns {HTMLElement} - Date separator DOM element\n */\nexport function renderDateSeparator(date) {\n  const separator = document.createElement(\"div\");\n  separator.className = \"webchat-date-separator\";\n\n  const today = new Date();\n  const yesterday = new Date(today);\n  yesterday.setDate(yesterday.getDate() - 1);\n\n  let dateText;\n  if (date.toDateString() === today.toDateString()) {\n    dateText = \"Today\";\n  } else if (date.toDateString() === yesterday.toDateString()) {\n    dateText = \"Yesterday\";\n  } else {\n    dateText = date.toLocaleDateString();\n  }\n\n  separator.innerHTML = `<span>${dateText}</span>`;\n  return separator;\n}\n\n/**\n * Render quick reply buttons\n * @param {Array} quickReplies - Array of quick reply options\n * @param {Function} onQuickReply - Callback function when a quick reply is clicked\n * @returns {HTMLElement} - Quick replies DOM element\n */\nexport function renderQuickReplies(quickReplies, onQuickReply) {\n  const container = document.createElement(\"div\");\n  container.className = \"webchat-quick-replies-container\";\n\n  quickReplies.forEach((reply) => {\n    const button = document.createElement(\"button\");\n    button.className = \"webchat-quick-reply-button\";\n    button.textContent = reply.text || reply.title;\n    button.onclick = () => onQuickReply(reply.value || reply.payload, reply.text || reply.title);\n    container.appendChild(button);\n  });\n\n  return container;\n}\n","/**\n * UI components for the chat container\n */\n\n/**\n * Helper function to darken a color\n * @param {string} color - The color to darken (hex, rgb, or named color)\n * @param {number} amount - Amount to darken (0-1)\n * @returns {string} - Darkened color\n */\nfunction darkenColor(color, amount) {\n  // Handle hex colors\n  if (color.startsWith('#')) {\n    const hex = color.slice(1);\n    const num = parseInt(hex, 16);\n    const r = Math.max(0, Math.floor((num >> 16) * (1 - amount)));\n    const g = Math.max(0, Math.floor(((num >> 8) & 0x00FF) * (1 - amount)));\n    const b = Math.max(0, Math.floor((num & 0x0000FF) * (1 - amount)));\n    return `#${((r << 16) | (g << 8) | b).toString(16).padStart(6, '0')}`;\n  }\n  \n  // Handle rgb/rgba colors\n  if (color.startsWith('rgb')) {\n    const matches = color.match(/\\d+/g);\n    if (matches) {\n      const r = Math.max(0, Math.floor(parseInt(matches[0]) * (1 - amount)));\n      const g = Math.max(0, Math.floor(parseInt(matches[1]) * (1 - amount)));\n      const b = Math.max(0, Math.floor(parseInt(matches[2]) * (1 - amount)));\n      const a = matches[3] ? parseFloat(matches[3]) : 1;\n      return `rgba(${r}, ${g}, ${b}, ${a})`;\n    }\n  }\n  \n  // For named colors or other formats, return a darker fallback\n  return color === '#007bff' ? '#0056b3' : '#3d39ac';\n}\n\n/**\n * Chat Container Component - Creates the main chat interface\n */\n\n/**\n * Create chat button\n * @param {Object} config - Widget configuration\n * @param {Function} toggleChat - Function to toggle chat visibility\n * @returns {HTMLElement} - Chat button element\n */\nexport function createChatButton(config, toggleChat) {\n  const button = document.createElement(\"button\");\n  button.id = \"GeniStudio-chat-button\";\n  button.className = \"webchat-button\";\n  button.innerHTML = `\n    <span class=\"chat-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"currentColor\">\n        <path d=\"M160-240q-33 0-56.5-23.5T80-320v-480q0-33 23.5-56.5T160-880h640q33 0 56.5 23.5T880-800v720L720-240H160Z\"/>\n      </svg>\n    </span>\n    <span class=\"close-icon\">\n      <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\" width=\"24px\" fill=\"currentColor\">\n        <path d=\"m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z\"/>\n      </svg>\n    </span>\n  `;\n  button.title = \"Open chat\";\n\n  // Apply custom button color if provided - set as CSS variables for the entire widget\n  if (config.buttonColor) {\n    // Set CSS custom properties on the document root so the entire widget can use them\n    document.documentElement.style.setProperty('--webchat-primary-color', config.buttonColor);\n    \n    // Calculate a darker version for hover states\n    const hoverColor = darkenColor(config.buttonColor, 0.15);\n    document.documentElement.style.setProperty('--webchat-primary-hover', hoverColor);\n  }\n\n  // Add custom styles from config\n  if (config.buttonStyles) {\n    Object.assign(button.style, config.buttonStyles);\n  }\n\n  // Apply position\n  const position = config.position || \"bottom-right\";\n  if (position.includes(\"left\")) {\n    button.style.left = \"35px\";\n    button.style.right = \"auto\";\n  } else {\n    button.style.right = \"35px\";\n  }\n  if (position.includes(\"top\")) {\n    button.style.top = \"30px\";\n    button.style.bottom = \"auto\";\n  } else {\n    button.style.bottom = \"30px\";\n  }\n\n  return button;\n}\n\n/**\n * Create the full chat container\n * @param {Object} config - Widget configuration\n * @param {Object} api - API object with event handlers\n * @returns {HTMLElement} - Chat container DOM element\n */\nexport function createChatContainer(config, api) {\n  // Apply custom button color as CSS variables if provided\n  if (config.buttonColor) {\n    document.documentElement.style.setProperty('--webchat-primary-color', config.buttonColor);\n    const hoverColor = darkenColor(config.buttonColor, 0.15);\n    document.documentElement.style.setProperty('--webchat-primary-hover', hoverColor);\n  }\n\n  const overlay = document.createElement(\"div\");\n  overlay.id = \"GeniStudio-chat-overlay\";\n  overlay.className = \"webchat-overlay hidden\";\n\n  // Apply position-based transform origin\n  const position = config.position || \"bottom-right\";\n  if (position.includes(\"left\")) {\n    overlay.style.transformOrigin = position.includes(\"top\") ? \"top left\" : \"bottom left\";\n  } else {\n    overlay.style.transformOrigin = position.includes(\"top\") ? \"top right\" : \"bottom right\";\n  }\n\n  overlay.innerHTML = `\n    <div class=\"webchat-container\">\n      <!-- Chat Header -->\n      <div class=\"chat-header\">\n        <div class=\"header-info\">\n          <svg class=\"chatbot-logo\" xmlns=\"http://www.w3.org/2000/svg\" width=\"50\" height=\"50\" viewBox=\"0 0 1024 1024\">\n            <path d=\"M738.3 287.6H285.7c-59 0-106.8 47.8-106.8 106.8v303.1c0 59 47.8 106.8 106.8 106.8h81.5v111.1c0 .7.8 1.1 1.4.7l166.9-110.6 41.8-.8h117.4l43.6-.4c59 0 106.8-47.8 106.8-106.8V394.5c0-59-47.8-106.9-106.8-106.9zM351.7 448.2c0-29.5 23.9-53.5 53.5-53.5s53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5-53.5-23.9-53.5-53.5zm157.9 267.1c-67.8 0-123.8-47.5-132.3-109h264.6c-8.6 61.5-64.5 109-132.3 109zm110-213.7c-29.5 0-53.5-23.9-53.5-53.5s23.9-53.5 53.5-53.5 53.5 23.9 53.5 53.5-23.9 53.5-53.5 53.5zM867.2 644.5V453.1h26.5c19.4 0 35.1 15.7 35.1 35.1v121.1c0 19.4-15.7 35.1-35.1 35.1h-26.5zM95.2 609.4V488.2c0-19.4 15.7-35.1 35.1-35.1h26.5v191.3h-26.5c-19.4 0-35.1-15.7-35.1-35.1zM561.5 149.6c0 23.4-15.6 43.3-36.9 49.7v44.9h-30v-44.9c-21.4-6.5-36.9-26.3-36.9-49.7 0-28.6 23.3-51.9 51.9-51.9s51.9 23.3 51.9 51.9z\"/>\n          </svg>\n          <h2 class=\"logo-text\">${config.chatbotName || 'Chatbot'}</h2>\n        </div>\n        <button id=\"GeniStudio-close-btn\" class=\"close-button\">\n          <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n            <path d=\"M6 9l6 6 6-6\"/>\n          </svg>\n        </button>\n      </div>\n      \n      <!-- Chat Body -->\n      <div class=\"chat-body\">\n        <div id=\"GeniStudio-messages\" class=\"webchat-messages\">\n          <!-- Messages will be rendered here -->\n        </div>\n      </div>\n      \n      <!-- Chat Footer -->\n      <div class=\"chat-footer\">\n        <form class=\"chat-form\" id=\"GeniStudio-input-form\">\n          <textarea \n            id=\"GeniStudio-input\"\n            class=\"message-input\" \n            placeholder=\"Type your message...\"\n            required\n            rows=\"1\"\n          ></textarea>\n          <div class=\"chat-controls\">\n            <button type=\"submit\" id=\"GeniStudio-send-btn\" class=\"send-button\">\n              <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\">\n                <path d=\"M22 2L11 13M22 2L15 22L11 13L2 9L22 2Z\"/>\n              </svg>\n            </button>\n          </div>\n        </form>\n        \n        <!-- Powered by GeniStudio -->\n        <div class=\"webchat-powered-by\">\n          <span class=\"powered-text\">Powered by</span>\n          <span class=\"geni-studio\">GeniStudio</span>\n        </div>\n      </div>\n    </div>\n  `;\n\n  // Add event handlers after DOM insertion\n  setTimeout(() => {\n    const form = document.getElementById(\"GeniStudio-input-form\");\n    if (form) form.addEventListener(\"submit\", api.sendMessage);\n\n    const closeBtn = document.getElementById(\"GeniStudio-close-btn\");\n    if (closeBtn) closeBtn.addEventListener(\"click\", api.close);\n\n    // Auto-resize textarea\n    const messageInput = document.getElementById(\"GeniStudio-input\");\n    if (messageInput) {\n      const initialHeight = messageInput.scrollHeight;\n      // Store initial height for later use when resetting\n      messageInput.setAttribute('data-initial-height', `${initialHeight}px`);\n      \n      messageInput.addEventListener(\"input\", () => {\n        messageInput.style.height = `${initialHeight}px`;\n        messageInput.style.height = `${messageInput.scrollHeight}px`;\n        \n        // Adjust form border radius based on height\n        const form = document.querySelector(\".chat-form\");\n        if (form) {\n          form.style.borderRadius = messageInput.scrollHeight > initialHeight ? \"15px\" : \"25px\";\n        }\n      });\n\n      // Handle Enter key for sending messages\n      messageInput.addEventListener(\"keydown\", (e) => {\n        const userMessage = e.target.value.trim();\n        if (e.key === \"Enter\" && !e.shiftKey && userMessage && window.innerWidth > 768) {\n          e.preventDefault();\n          api.sendMessage(e);\n        }\n      });\n    }\n  }, 0);\n\n  return overlay;\n}\n","/**\n * GeniStudio Web Chat Widget - Main Module\n * Connects UI components and GeniStudio HTTP API communication\n */\nimport {\n  sendMessageToAPI,\n} from \"./api-client\";\nimport {\n  renderMessageBubble,\n  renderTypingIndicator,\n  renderEmptyState,\n  renderDateSeparator,\n  renderQuickReplies,\n} from \"../components/message-bubbles\";\nimport { parseMarkdown } from \"../utils/markdown\";\nimport {\n  createChatButton,\n  createChatContainer,\n} from \"../components/chat-container\";\nimport { generateUserId, groupMessagesBySender } from \"../utils/ui-helpers\";\n\n/**\n * Create and initialize the chat widget\n * @param {Object} userConfig - Widget configuration\n * @returns {Object} - Widget API\n */\nexport function initWebChat(userConfig = {}) {\n  let config = {\n    apiUrl: \"https://genibot-mini-sever.onrender.com/api/chatbot/stream\",\n    chatbotId: \"\",\n    userEmail: \"\",\n    buttonColor: \"\",\n    injectCSS: false,\n    ...userConfig,\n  };\n\n  if (!config.chatbotName || typeof config.chatbotName !== \"string\") {\n    config.chatbotName = \"GeniStudio Support\";\n  }\n\n  // Validate required configuration\n  if (!config.chatbotId) {\n    console.error(\"GeniStudio: chatbotId is required\");\n    return null;\n  }\n\n  // Generate user email if not provided\n  if (!config.userEmail) {\n    const userId = generateUserId();\n    config.userEmail = `${userId}@webchat.genistudio.com`;\n  }\n\n  // State variables\n  let isOpen = false;\n  let messages = [];\n  let isLoading = false;\n  let currentStreamingMessage = null;\n\n  // Timing variables for response time measurement\n  let messageTimestamps = {};\n\n  // Create UI components - don't pass toggleChat here to prevent duplicate handlers\n  const chatButton = createChatButton(config, null);\n  document.body.appendChild(chatButton);\n\n  // Add a single, direct event handler to the button\n  chatButton.addEventListener(\"click\", (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    console.log(\n      \"Chat button clicked, current state:\",\n      isOpen ? \"open\" : \"closed\"\n    );\n    toggleChat();\n  });\n\n  const chatContainerAPI = {\n    sendMessage: (event) => sendMessage(event),\n    close: () => close(),\n    toggleExpand: () => toggleExpand(),\n  };\n\n  const chatContainer = createChatContainer(config, chatContainerAPI);\n  document.body.appendChild(chatContainer);\n\n  // Set up page unload handler\n  if (typeof window !== \"undefined\") {\n    window.addEventListener(\"beforeunload\", cleanup);\n\n    // Add resize listener to handle responsive behavior\n    window.addEventListener(\n      \"resize\",\n      debounce(() => {\n        if (isOpen) positionChatContainer();\n      }, 250)\n    );\n  }\n\n  // Debounce function to limit rapid resize events\n  function debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n      const later = () => {\n        clearTimeout(timeout);\n        func(...args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // Core functions\n  function toggleChat() {\n    isOpen = !isOpen;\n    const overlay = document.getElementById(\"GeniStudio-chat-overlay\");\n    const chatButton = document.getElementById(\"GeniStudio-chat-button\");\n\n    if (isOpen) {\n      // Check if we're on mobile\n      const isMobile = window.innerWidth <= 768;\n\n      // Position the chat container based on button position\n      positionChatContainer();\n\n      // Show the overlay\n      overlay.classList.remove(\"hidden\");\n      overlay.classList.add(\"visible\");\n\n      // On mobile, add a body class to prevent scrolling\n      if (isMobile) {\n        document.body.classList.add(\"webchat-open\");\n      }\n\n      renderMessages();\n\n      // Update button appearance for \"close\" state\n      if (chatButton) {\n        chatButton.classList.add(\"is-open\");\n        chatButton.title = \"Close chat\";\n      }\n\n      // Emit chat opened event for React integration\n      emitEvent(\"chatOpened\");\n\n      const input = document.getElementById(\"GeniStudio-input\");\n      if (input && !input.disabled) input.focus();\n    } else {\n      // Hide the overlay\n      overlay.classList.remove(\"visible\");\n      overlay.classList.add(\"hidden\");\n\n      // Check if we're on mobile\n      const isMobile = window.innerWidth <= 768;\n\n      // On mobile, remove body class that prevents scrolling\n      if (isMobile) {\n        document.body.classList.remove(\"webchat-open\");\n      }\n\n      // Update button appearance for \"open\" state\n      if (chatButton) {\n        chatButton.classList.remove(\"is-open\");\n        chatButton.title = \"Open chat\";\n      }\n\n      // Emit chat closed event for React integration\n      emitEvent(\"chatClosed\");\n    }\n  }\n\n  // Function to position the chat container based on button position\n  function positionChatContainer() {\n    const chatButton = document.getElementById(\"GeniStudio-chat-button\");\n    const overlay = document.getElementById(\"GeniStudio-chat-overlay\");\n    const container = overlay.querySelector(\".webchat-container\");\n\n    if (chatButton && container) {\n      // Check if we're on mobile\n      const isMobile = window.innerWidth <= 768;\n\n      // On mobile, the container is full screen\n      if (isMobile) {\n        // Remove any position styles to allow the mobile CSS to take over\n        container.style.right = \"\";\n        container.style.left = \"\";\n        container.style.bottom = \"\";\n        container.style.top = \"\";\n\n        // Add a class to help with mobile styling\n        container.classList.add(\"mobile-fullscreen\");\n      } else {\n        // On desktop, position based on button\n        const buttonRect = chatButton.getBoundingClientRect();\n        const position = config.position || \"bottom-right\";\n\n        // Remove the mobile class if it exists\n        container.classList.remove(\"mobile-fullscreen\");\n\n        // Set chat container position based on button position\n        if (position.includes(\"right\")) {\n          container.style.right = \"20px\";\n          container.style.left = \"auto\";\n        } else {\n          container.style.left = \"20px\";\n          container.style.right = \"auto\";\n        }\n\n        if (position.includes(\"bottom\")) {\n          container.style.bottom =\n            window.innerHeight - buttonRect.top + 10 + \"px\";\n          container.style.top = \"auto\";\n        } else {\n          container.style.top = buttonRect.bottom + 10 + \"px\";\n          container.style.bottom = \"auto\";\n        }\n      }\n    }\n  }\n\n  function close() {\n    isOpen = false;\n    const overlay = document.getElementById(\"GeniStudio-chat-overlay\");\n\n    // Hide the overlay\n    overlay.classList.remove(\"visible\");\n    overlay.classList.add(\"hidden\");\n\n    // Check if we're on mobile\n    const isMobile = window.innerWidth <= 768;\n\n    // On mobile, remove body class that prevents scrolling\n    if (isMobile) {\n      document.body.classList.remove(\"webchat-open\");\n    }\n\n    // Reset the chat button to \"open\" state\n    const chatButton = document.getElementById(\"GeniStudio-chat-button\");\n    if (chatButton) {\n      chatButton.classList.remove(\"is-open\");\n      chatButton.title = \"Open chat\";\n    }\n\n    // Emit chat closed event for React integration\n    emitEvent(\"chatClosed\");\n  }\n\n  function handleAPIStreamingChunk(chunk) {\n    console.log(\"Received API streaming chunk:\", chunk);\n    if (!currentStreamingMessage) {\n      // Create a new streaming message if one doesn't exist\n      const now = new Date();\n\n      // Find the last user message to calculate time to first chunk\n      const lastUserMessage = [...messages]\n        .reverse()\n        .find((m) => m.sender === \"user\");\n      if (lastUserMessage && messageTimestamps[lastUserMessage.id]) {\n        const sentAt = messageTimestamps[lastUserMessage.id].sentAt;\n        const timeToFirstChunkMs = now - sentAt;\n        const timeToFirstChunkSec = (timeToFirstChunkMs / 1000).toFixed(2);\n        const formattedTime = formatResponseTime(timeToFirstChunkSec);\n\n        // Log time to first response to console\n        console.log(`Time to first response: ${formattedTime}`);\n      }\n\n      currentStreamingMessage = {\n        id: Date.now(),\n        text: \"\",\n        sender: \"bot\",\n        timestamp: now,\n        isStreaming: true,\n      };\n      messages.push(currentStreamingMessage);\n      hideTypingIndicator();\n      \n      // Add the new bot message with animation for the first chunk\n      addNewMessageWithAnimation(currentStreamingMessage);\n    }\n\n    // Append the chunk to the current streaming message\n    currentStreamingMessage.text += chunk;\n    \n    // For subsequent chunks, just re-render without full page refresh\n    const container = document.getElementById(\"GeniStudio-messages\");\n    const lastMessage = container?.lastElementChild;\n    if (lastMessage && currentStreamingMessage) {\n      const textContent = lastMessage.querySelector('.message-text');\n      if (textContent) {\n        textContent.innerHTML = parseMarkdown(currentStreamingMessage.text || \"\");\n        if (currentStreamingMessage.isStreaming) {\n          textContent.innerHTML += '<span class=\"cursor\">|</span>';\n        }\n      }\n    }\n    \n    // Scroll to bottom with improved timing for streaming updates\n    forceScrollToBottom();\n  }\n\n  function handleAPIStreamingComplete(data) {\n    console.log(\"API streaming complete received:\", data);\n    if (currentStreamingMessage) {\n      // Calculate and log response time\n      const lastUserMessage = [...messages]\n        .reverse()\n        .find((m) => m.sender === \"user\");\n      if (lastUserMessage && messageTimestamps[lastUserMessage.id]) {\n        const sentAt = messageTimestamps[lastUserMessage.id].sentAt;\n        const completedAt = new Date();\n        const totalTimeMs = completedAt - sentAt;\n        const totalTimeSec = (totalTimeMs / 1000).toFixed(2);\n        const formattedTime = formatResponseTime(totalTimeSec);\n\n        console.log(`Total response time: ${formattedTime}`);\n      }\n\n      currentStreamingMessage.isStreaming = false;\n      currentStreamingMessage = null;\n    }\n    \n    hideTypingIndicator();\n    enableInput();\n    \n    // Re-render to remove streaming indicator\n    renderMessages();\n    \n    console.log(\"API streaming complete:\", data);\n  }\n\n  function handleAPIError(errorMessage) {\n    console.error(\"API error:\", errorMessage);\n    handleStreamingError(errorMessage);\n    \n    // Enable input after error\n    enableInput();\n  }\n\n  function handleAPITyping(isTyping) {\n    if (isTyping) {\n      showTypingIndicator(\"typing\");\n    } else {\n      hideTypingIndicator();\n    }\n  }\n\n  function handleBotMessage(data) {\n    // Hide typing indicator when message is received\n    hideTypingIndicator();\n\n    // Finalize any streaming message\n    if (currentStreamingMessage) {\n      currentStreamingMessage.isStreaming = false;\n      currentStreamingMessage = null;\n    }\n\n    // Remove any incomplete streaming messages\n    messages = messages.filter((m) => !(m.sender === \"bot\" && m.isStreaming));\n\n    // Extract text from various possible fields\n    let botText = data.text || data.message;\n    if (!botText) {\n      for (const key in data) {\n        if (typeof data[key] === \"string\" && key !== \"type\") {\n          botText = data[key];\n          break;\n        }\n      }\n    }\n\n    // Find the last user message to calculate response time\n    if (messages.length > 0) {\n      // Find the last user message\n      const lastUserMessage = [...messages]\n        .reverse()\n        .find((m) => m.sender === \"user\");\n\n      if (lastUserMessage && messageTimestamps[lastUserMessage.id]) {\n        const now = new Date();\n        const sentAt = messageTimestamps[lastUserMessage.id].sentAt;\n        const responseTimeMs = now - sentAt;\n        const responseTimeSec = (responseTimeMs / 1000).toFixed(2);\n        const formattedTime = formatResponseTime(responseTimeSec);\n\n        // Log response time to console\n        console.log(`Response time: ${formattedTime}`);\n\n        // Clean up the timestamp record to prevent memory leaks\n        delete messageTimestamps[lastUserMessage.id];\n      }\n    }\n\n    // Emit message received event for React integration\n    emitEvent(\"messageReceived\", {\n      text: botText,\n      sender: \"bot\",\n      timestamp: new Date(),\n      ...data,\n    });\n\n    if (botText) {\n      // Find the last message from the bot, if it exists\n      const lastBotMessageIndex = [...messages]\n        .reverse()\n        .findIndex((m) => m.sender === \"bot\" && !m.isStreaming);\n      const lastBotMessage =\n        lastBotMessageIndex !== -1\n          ? messages[messages.length - 1 - lastBotMessageIndex]\n          : null;\n\n      // If the last message was from the bot and it wasn't too long ago, append to it\n      const messageTimeDiff = lastBotMessage\n        ? new Date() - lastBotMessage.timestamp\n        : null;\n      if (lastBotMessage && messageTimeDiff && messageTimeDiff < 5000) {\n        // 5 seconds threshold\n        // Append the new text to the existing message without breaking the line\n        lastBotMessage.text += botText;\n        lastBotMessage.timestamp = new Date(); // Update timestamp\n      } else {\n        // Create a new message\n        messages.push({\n          id: Date.now(),\n          text: botText,\n          sender: \"bot\",\n          timestamp: new Date(),\n          isStreaming: false,\n        });\n      }\n\n      renderMessages();\n      enableInput();\n    } else {\n      console.warn(\"Unknown API message format or missing text:\", data);\n    }\n  }\n\n  function handleStreamingError(errorMessage) {\n    hideTypingIndicator();\n\n    const errorMsg = {\n      id: Date.now(),\n      text:\n        errorMessage ||\n        \"Sorry, I'm having trouble connecting right now. Please try again later.\",\n      sender: \"bot\",\n      timestamp: new Date(),\n      isError: true,\n    };\n\n    messages.push(errorMsg);\n    renderMessages();\n    enableInput();\n    currentStreamingMessage = null;\n  }\n\n  /**\n   * Show typing indicator with different stages\n   * @param {string} [stage='typing'] - The current processing stage ('processing', 'thinking', 'typing')\n   */\n  /**\n   * Add a typing indicator with animation\n   * @param {string} stage - The processing stage\n   */\n  function addTypingIndicatorWithAnimation(stage = \"typing\") {\n    const container = document.getElementById(\"GeniStudio-messages\");\n    if (!container) return;\n\n    // Remove any existing typing indicator first\n    const existingTyping = container.querySelector('.typing-wrapper');\n    if (existingTyping) {\n      existingTyping.remove();\n    }\n\n    // Create and append the new typing indicator with animation\n    const typingElement = renderTypingIndicator(stage, true);\n    container.appendChild(typingElement);\n\n    // Auto-scroll to the new typing indicator with improved timing\n    forceScrollToBottom();\n  }\n\n  function showTypingIndicator(stage = \"typing\") {\n    isLoading = true;\n    currentProcessingStage = stage;\n    addTypingIndicatorWithAnimation(stage);\n  }\n\n  function hideTypingIndicator() {\n    isLoading = false;\n    currentProcessingStage = null;\n    \n    // Remove the typing indicator with animation\n    const container = document.getElementById(\"GeniStudio-messages\");\n    if (container) {\n      const existingTyping = container.querySelector('.typing-wrapper');\n      if (existingTyping) {\n        existingTyping.style.opacity = '0';\n        existingTyping.style.transform = 'translateX(-30px) scale(0.9)';\n        setTimeout(() => {\n          if (existingTyping.parentNode) {\n            existingTyping.remove();\n          }\n        }, 300);\n      }\n    }\n  }\n\n  function enableInput() {\n    const input = document.getElementById(\"GeniStudio-input\");\n    const sendButton = document.getElementById(\"GeniStudio-send-btn\");\n\n    if (input) input.disabled = false;\n    if (sendButton) sendButton.disabled = false;\n    if (input) input.focus();\n  }\n\n  function disableInput() {\n    const input = document.getElementById(\"GeniStudio-input\");\n    const sendButton = document.getElementById(\"GeniStudio-send-btn\");\n\n    if (input) input.disabled = true;\n    if (sendButton) sendButton.disabled = true;\n  }\n\n  // Track current processing stage\n  let currentProcessingStage = null;\n\n  /**\n   * Scroll to the bottom of the messages container with better timing\n   */\n  function scrollToBottom() {\n    const messagesContainer = document.getElementById(\"GeniStudio-messages\");\n    if (messagesContainer) {\n      // Use requestAnimationFrame to ensure DOM updates are complete\n      requestAnimationFrame(() => {\n        // Double requestAnimationFrame to ensure all layouts are complete\n        requestAnimationFrame(() => {\n          messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        });\n      });\n    }\n  }\n\n  /**\n   * Force scroll to bottom with smooth behavior (alternative method)\n   */\n  function forceScrollToBottom() {\n    const messagesContainer = document.getElementById(\"GeniStudio-messages\");\n    if (messagesContainer) {\n      // Try multiple methods to ensure scrolling works\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n      \n      // Also try scrollIntoView on the last message\n      const lastMessage = messagesContainer.lastElementChild;\n      if (lastMessage) {\n        lastMessage.scrollIntoView({ behavior: 'smooth', block: 'end' });\n      }\n      \n      // Final fallback with setTimeout\n      setTimeout(() => {\n        messagesContainer.scrollTop = messagesContainer.scrollHeight;\n      }, 100);\n    }\n  }\n\n  /**\n   * Add a new message to the chat with animation\n   * @param {Object} message - The message object to add\n   */\n  function addNewMessageWithAnimation(message) {\n    const container = document.getElementById(\"GeniStudio-messages\");\n    if (!container) return;\n\n    // Add the bot's name for avatar display\n    if (message.sender === \"bot\") {\n      message.botName = config.chatbotName;\n      message.avatar = config.avatarUrl;\n    }\n\n    // Create and append the new message with animation\n    const messageElement = renderMessageBubble(message, true);\n    container.appendChild(messageElement);\n\n    // Auto-scroll to the new message with improved timing\n    forceScrollToBottom();\n  }\n\n  function renderMessages() {\n    const container = document.getElementById(\"GeniStudio-messages\");\n    if (!container) return;\n\n    container.innerHTML = \"\";\n\n    if (messages.length === 0 && !isLoading) {\n      container.appendChild(renderEmptyState());\n      return;\n    }\n\n    // Group messages by sender and add date separators\n    const groupedMessages = groupMessagesBySender(messages);\n\n    // Render all messages with date separators\n    groupedMessages.forEach((message) => {\n      if (message.isStreaming && currentStreamingMessage !== message) return;\n\n      // Add date separator if needed\n      if (message.needsDateSeparator) {\n        const separatorDate = new Date(message.timestamp);\n        container.appendChild(renderDateSeparator(separatorDate));\n      }\n\n      // Add CSS classes for message grouping\n      message.isFirstInGroup = message.isFirstInGroup || false;\n      message.isLastInGroup = message.isLastInGroup || false;\n\n      // Add the bot's name for avatar display\n      if (message.sender === \"bot\") {\n        message.botName = config.chatbotName;\n        message.avatar = config.avatarUrl;\n      }\n\n      // Don't animate existing messages when re-rendering\n      container.appendChild(renderMessageBubble(message, false));\n    });\n\n    // Show typing indicator with appropriate stage\n    if (isLoading) {\n      // Always animate typing indicators since they're always new\n      container.appendChild(renderTypingIndicator(currentProcessingStage, true));\n    }\n\n    // Render quick reply options if available\n    const quickRepliesContainer = document.getElementById(\n      \"GeniStudio-quick-replies\"\n    );\n    if (quickRepliesContainer) {\n      quickRepliesContainer.innerHTML = \"\";\n\n      const lastMessage = groupedMessages[groupedMessages.length - 1];\n      if (\n        lastMessage &&\n        lastMessage.quickReplies &&\n        lastMessage.quickReplies.length > 0\n      ) {\n        const quickRepliesElement = renderQuickReplies(\n          lastMessage.quickReplies,\n          (value, text) => {\n            // Handle quick reply selection\n            sendQuickReply(value, text);\n          }\n        );\n        quickRepliesContainer.appendChild(quickRepliesElement);\n      }\n    }\n\n    // Ensure we scroll to bottom after all content is rendered\n    forceScrollToBottom();\n  }\n\n  function sendMessage(event) {\n    if (event) event.preventDefault();\n\n    const input = document.getElementById(\"GeniStudio-input\");\n    const message = input.value.trim();\n\n    if (!message || isLoading) {\n      return;\n    }\n\n    // Generate a unique message ID\n    const messageId = Date.now();\n\n    // Record the timestamp when the message is sent\n    messageTimestamps[messageId] = {\n      sentAt: new Date(),\n      message: message,\n    };\n\n    // Add user message first so we can reference it\n    const userMessage = {\n      id: messageId,\n      text: message,\n      sender: \"user\",\n      timestamp: new Date(),\n    };\n\n    messages.push(userMessage);\n    input.value = \"\";\n    \n    // Reset textarea height to default size\n    const initialHeight = input.getAttribute('data-initial-height') || '47px';\n    input.style.height = initialHeight;\n    \n    // Reset form border radius to default\n    const form = document.querySelector(\".chat-form\");\n    if (form) {\n      form.style.borderRadius = \"25px\";\n    }\n    \n    disableInput();\n\n    // Add the new user message with animation instead of re-rendering all\n    addNewMessageWithAnimation(userMessage);\n\n    // Show processing indicator immediately when sending the message\n    showTypingIndicator(\"processing\");\n\n    // Scroll to bottom\n    const messagesContainer = document.getElementById(\"GeniStudio-messages\");\n    if (messagesContainer) {\n      messagesContainer.scrollTop = messagesContainer.scrollHeight;\n    }\n\n    // Send via GeniStudio HTTP API\n    sendMessageToAPI(\n      config.apiUrl,\n      config.chatbotId,\n      config.userEmail,\n      message,\n      handleAPIStreamingChunk,\n      handleAPIStreamingComplete,\n      handleAPIError,\n      handleAPITyping\n    ).catch((error) => {\n      console.error(\"Error sending message to GeniStudio API:\", error);\n      handleStreamingError(\"Failed to send message. Please try again.\");\n    });\n  }\n\n  /**\n   * Send a quick reply message\n   * @param {string} value - The value of the quick reply\n   * @param {string} text - The display text of the quick reply\n   */\n  function sendQuickReply(value, text) {\n    // Add user message with the quick reply text\n    const userMessage = {\n      id: Date.now(),\n      text: text,\n      sender: \"user\",\n      timestamp: new Date(),\n      isQuickReply: true,\n    };\n\n    messages.push(userMessage);\n\n    // Clear quick replies\n    const quickRepliesContainer = document.getElementById(\n      \"GeniStudio-quick-replies\"\n    );\n    if (quickRepliesContainer) {\n      quickRepliesContainer.innerHTML = \"\";\n    }\n\n    // Disable input during processing\n    disableInput();\n\n    // Add the new user message with animation instead of re-rendering all\n    addNewMessageWithAnimation(userMessage);\n\n    // Show processing indicator\n    showTypingIndicator(\"processing\");\n\n    // Send the message to the server\n    sendMessageToAPI(\n      config.apiUrl,\n      config.chatbotId,\n      config.userEmail,\n      text, // Use text instead of value for the message content\n      handleAPIStreamingChunk,\n      handleAPIStreamingComplete,\n      handleAPIError,\n      handleAPITyping\n    ).catch((error) => {\n      console.error(\"Error sending quick reply to GeniStudio API:\", error);\n      handleStreamingError(\"Failed to send message. Please try again.\");\n    });\n  }\n\n  function cleanup() {\n    // Clean up any ongoing streaming messages\n    currentStreamingMessage = null;\n    \n    // Clean up event listeners if needed\n    // No WebSocket to cleanup since we're using HTTP API\n    console.log(\"Chat widget cleanup completed\");\n  }\n\n  // CSS injection is handled by the main index.js file\n\n  // Helper function to emit events for React integration\n  function emitEvent(eventName, data = {}) {\n    if (typeof window !== \"undefined\") {\n      const event = new CustomEvent(`geniStudio:${eventName}`, {\n        detail: data,\n      });\n      document.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * Format response time for display\n   * @param {number} seconds - Response time in seconds\n   * @returns {string} - Formatted response time string\n   */\n  function formatResponseTime(seconds) {\n    // Convert string to number if needed\n    const secs = parseFloat(seconds);\n\n    if (secs < 0.1) {\n      return `${Math.round(secs * 1000)}ms`;\n    } else if (secs < 1) {\n      return `${(secs * 1000).toFixed(0)}ms`;\n    } else if (secs < 60) {\n      return `${secs.toFixed(2)}s`;\n    }\n    const minutes = Math.floor(secs / 60);\n    const remainingSeconds = (secs % 60).toFixed(1);\n    return `${minutes}m ${remainingSeconds}s`;\n  }\n\n  /**\n   * Toggle the expanded/fullscreen state of the chat container\n   */\n  function toggleExpand() {\n    const container = document.querySelector(\".webchat-container\");\n    const expandBtn = document.getElementById(\"GeniStudio-expand-btn\");\n\n    if (container) {\n      // Toggle the expanded class\n      container.classList.toggle(\"expanded\");\n\n      // Update the expand button icon based on current state\n      if (expandBtn) {\n        if (container.classList.contains(\"expanded\")) {\n          // Change to collapse icon when expanded\n          expandBtn.innerHTML = `\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n              <path d=\"M4 12L12 4M6 4H12M12 4V10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" transform=\"rotate(180 8 8)\"/>\n            </svg>\n          `;\n          expandBtn.title = \"Collapse\";\n        } else {\n          // Change back to expand icon when collapsed\n          expandBtn.innerHTML = `\n            <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\">\n              <path d=\"M4 12L12 4M12 4H6M12 4V10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\n            </svg>\n          `;\n          expandBtn.title = \"Expand\";\n        }\n      }\n\n      // Adjust messages container to ensure proper scrolling in both states\n      const messagesContainer = document.getElementById(\"GeniStudio-messages\");\n      if (messagesContainer) {\n        setTimeout(() => {\n          messagesContainer.scrollTop = messagesContainer.scrollHeight;\n        }, 100);\n      }\n    }\n  }\n\n  // Public API\n  return {\n    open: () => {\n      if (!isOpen) toggleChat();\n    },\n    close: () => {\n      if (isOpen) close();\n    },\n    toggle: () => {\n      toggleChat(); // Always toggle regardless of state\n    },\n    toggleExpand: () => {\n      toggleExpand(); // Toggle expanded/fullscreen mode\n    },\n    sendMessage: (message) => {\n      if (typeof message === \"string\" && message.trim()) {\n        const input = document.getElementById(\"GeniStudio-input\");\n        if (input) {\n          input.value = message;\n          sendMessage();\n        }\n      }\n    },\n    // Reset chat history\n    reset: () => {\n      messages = [];\n      renderMessages();\n      return true;\n    },\n    cleanup: cleanup,\n  };\n}\n","/**\n * Utility function to dynamically inject scoped CSS styles\n * This ensures widget styles don't leak into the parent application\n */\n\n// In CDN mode, we don't need to inject CSS content directly\n// as we're loading the CSS file separately\n\n/**\n * Generate a unique ID for the style tag\n * @returns {string} Unique ID\n */\nfunction generateStyleId() {\n  return (\n    \"genistudio-webchat-styles-\" + Math.random().toString(36).substring(2, 9)\n  );\n}\n\n// CSS scoping is now handled by the CSS file itself\n\n/**\n * Injects the CSS for the webchat widget into the document head\n * @returns {Element} The created link element for CDN or style element for inline\n */\nexport function injectStyles() {\n  // Check if styles are already injected\n  const existingStyle = document.getElementById(\"genistudio-webchat-styles\");\n  if (existingStyle) {\n    return existingStyle;\n  }\n\n  // Generate ID for the style element\n  const styleId = generateStyleId();\n\n  // In CDN mode, we link to the external CSS file\n  const link = document.createElement(\"link\");\n  link.id = styleId;\n  link.rel = \"stylesheet\";\n  link.href = \"dist/index.cdn.css\"; // Path relative to where script is loaded\n\n  // Add to document head\n  document.head.appendChild(link);\n  return link;\n}\n\n/**\n * Creates a shadow DOM container for complete CSS isolation\n * @returns {ShadowRoot} The shadow root\n */\nexport function createShadowContainer() {\n  // Create a container for the shadow DOM\n  const container = document.createElement(\"div\");\n  container.id = \"genistudio-webchat-container\";\n  document.body.appendChild(container);\n\n  // Attach shadow DOM\n  const shadowRoot = container.attachShadow({ mode: \"open\" });\n\n  // Add styles to shadow DOM by linking to the CSS file\n  const link = document.createElement(\"link\");\n  link.rel = \"stylesheet\";\n  link.href = \"dist/index.cdn.css\"; // Path relative to where script is loaded\n  shadowRoot.appendChild(link);\n\n  return shadowRoot;\n}\n\n/**\n * Remove injected styles\n */\nexport function removeStyles() {\n  const style = document.getElementById(\"genistudio-webchat-styles\");\n  if (style) {\n    style.remove();\n  }\n\n  // Also check for shadow DOM container\n  const container = document.getElementById(\"genistudio-webchat-container\");\n  if (container) {\n    container.remove();\n  }\n}\n\nexport default {\n  injectStyles,\n  createShadowContainer,\n  removeStyles,\n};\n","/**\n * GeniStudio Web Chat Widget\n * Main entry point for the library\n *\n * This file exports:\n * 1. initWebChat - Vanilla JS function to initialize the chat widget\n * Simplified for CDN-only usage\n */\n\nimport { initWebChat } from \"./core/webchat\";\nimport { injectStyles, createShadowContainer } from \"./utils/style-injector\";\n\n// CSS will be imported by the build process\nimport \"./styles/webchat.css\";\n\n// Enhanced initWebChat with style handling\nfunction enhancedInitWebChat(config = {}) {\n  // Handle CSS injection options\n  if (config.injectCSS) {\n    injectStyles();\n  }\n\n  // Handle Shadow DOM option\n  if (config.useShadowDOM) {\n    // Create a shadow DOM for complete isolation\n    const shadowRoot = createShadowContainer();\n    config._shadowRoot = shadowRoot;\n  }\n\n  // Initialize the actual widget\n  return initWebChat(config);\n}\n\n// Export the public API - named exports for specific imports\nexport { enhancedInitWebChat as initWebChat };\n\n// Auto-initialize if config is provided in window and attach to window.GeniStudioWebChat\nif (typeof window !== \"undefined\") {\n  // Create the API object on window\n  window.GeniStudioWebChat = window.GeniStudioWebChat || {};\n\n  // Add the initialization function\n  window.GeniStudioWebChat.initWebChat = enhancedInitWebChat;\n\n  // Auto-initialize if config is provided\n  if (window.GeniStudioConfig) {\n    // Store the returned API on window.GeniStudioWebChat\n    const api = enhancedInitWebChat(window.GeniStudioConfig);\n\n    // Copy all API methods to the global object\n    Object.keys(api).forEach((key) => {\n      window.GeniStudioWebChat[key] = api[key];\n    });\n  }\n}\n\n// Define a default export with the vanilla JS API\nexport default { initWebChat: enhancedInitWebChat };\n"],"names":["async","sendMessageToAPI","apiUrl","chatbotId","email","message","onChunk","onComplete","onError","onTyping","requestBody","console","log","response","fetch","method","headers","body","JSON","stringify","status","statusText","ok","errorText","text","errorMessage","error","parse","e","Error","reader","getReader","responseText","messageContent","jsonResponse","warn","timestamp","Date","toISOString","accumulatedText","done","value","read","chunk","TextDecoder","decode","chunkContent","jsonChunk","includes","parseMarkdown","replace","match","startsWith","trim","needsDateSeparator","prevMessage","messageDate","prevMessageDate","date2","date1","getFullYear","getMonth","getDate","renderMessageBubble","isNewMessage","arguments","length","undefined","wrapper","document","createElement","className","sender","classList","add","setTimeout","remove","innerHTML","isStreaming","textContent","querySelector","renderTypingIndicator","darkenColor","color","amount","hex","slice","num","parseInt","Math","max","floor","toString","padStart","matches","parseFloat","initWebChat","config","userEmail","buttonColor","injectCSS","chatbotName","userId","random","substring","isOpen","messages","isLoading","currentStreamingMessage","messageTimestamps","chatButton","button","id","title","documentElement","style","setProperty","hoverColor","buttonStyles","Object","assign","position","left","right","top","bottom","createChatButton","appendChild","addEventListener","preventDefault","stopPropagation","toggleChat","chatContainer","api","overlay","transformOrigin","form","getElementById","sendMessage","closeBtn","close","messageInput","initialHeight","scrollHeight","setAttribute","height","borderRadius","userMessage","target","key","shiftKey","window","innerWidth","createChatContainer","event","toggleExpand","isMobile","positionChatContainer","renderMessages","emitEvent","input","disabled","focus","container","buttonRect","getBoundingClientRect","innerHeight","handleAPIStreamingChunk","now","lastUserMessage","reverse","find","m","formattedTime","formatResponseTime","sentAt","toFixed","push","hideTypingIndicator","addNewMessageWithAnimation","lastMessage","lastElementChild","forceScrollToBottom","handleAPIStreamingComplete","data","enableInput","handleAPIError","handleStreamingError","handleAPITyping","isTyping","showTypingIndicator","errorMsg","isError","stage","currentProcessingStage","existingTyping","typingElement","addTypingIndicatorWithAnimation","opacity","transform","parentNode","sendButton","disableInput","cleanup","func","wait","timeout","_len","args","Array","_key","later","clearTimeout","debounce","messagesContainer","scrollTop","scrollIntoView","behavior","block","botName","avatar","avatarUrl","messageElement","groupedMessages","map","index","isFirstInGroup","isLastInGroup","needsSeparator","groupMessagesBySender","forEach","separatorDate","date","separator","today","yesterday","dateText","setDate","toDateString","toLocaleDateString","renderDateSeparator","quickRepliesContainer","quickReplies","quickRepliesElement","onQuickReply","reply","onclick","payload","renderQuickReplies","isQuickReply","catch","sendQuickReply","messageId","getAttribute","eventName","CustomEvent","detail","dispatchEvent","seconds","secs","round","expandBtn","toggle","contains","open","reset","injectStyles","existingStyle","styleId","link","rel","href","head","enhancedInitWebChat","useShadowDOM","shadowRoot","attachShadow","mode","createShadowContainer","_shadowRoot","GeniStudioWebChat","GeniStudioConfig","keys"],"mappings":"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"}